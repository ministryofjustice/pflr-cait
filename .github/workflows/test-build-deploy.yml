name: CI and CD
on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12.22.6

      - name: Find yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: JS package cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install packages
        run: |
          yarn install --ignore-optional --pure-lockfile

      - name: Run linters
        run: yarn lint

      - name: Run tests
        run: yarn test:unit
  
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Store current date
        run: echo "BUILD_DATE=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

      # Assume role in Cloud Platform
      - name: Assume role in Cloud Platform
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}

      # Login to container repository
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: Build and push
        run: |
          docker build \
            --label build.git.sha=${{ github.sha }} \
            --label build.git.branch=${{ github.ref }} \
            --label build.date=${{ env.BUILD_DATE }} \
            --build-arg APP_BUILD_DATE=${{ env.BUILD_DATE }} \
            --build-arg APP_BUILD_TAG=${{ github.ref }} \
            --build-arg APP_GIT_COMMIT=${{ github.sha }} \
            --build-arg APP_VERSION=${{ github.run_number }} \
            -t app .
          docker push ${{ vars.ECR_NAME }}:${{ github.sha }}, ${{ vars.ECR_NAME }}:staging.latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build

    env:
      KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}

    steps:
      - name: Authenticate to the cluster
        env:
          KUBE_CERT: ${{ secrets.KUBE_CERT }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}

      - name: Rollout restart deployment
        run: |
          kubectl set image -n ${KUBE_NAMESPACE} \
          deployment/fj-cait-deployment-staging \
          webapp="${{ vars.ECR_URL }}:${{ github.sha }}"

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production

    env:
      KUBE_NAMESPACE: ${{ secrets.KUBE_PROD_NAMESPACE }}

    steps:
      - name: Authenticate to the cluster
        env:
          KUBE_CERT: ${{ secrets.KUBE_PROD_CERT }}
          KUBE_TOKEN: ${{ secrets.KUBE_PROD_TOKEN }}
          KUBE_CLUSTER: ${{ secrets.KUBE_PROD_CLUSTER }}
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}

      - name: Rollout restart deployment
        run: |
          kubectl set image -n ${KUBE_NAMESPACE} \
          deployment/fj-cait-deployment-production \
          webapp="${{ vars.ECR_URL }}:${{ github.sha }}"
